.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 2023-10-12 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
VCS::SCCS \- OO Interface to SCCS files
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& use VCS::SCCS;
\&
\& my $sccs = VCS::SCCS\->new ("SCCS/s.file.pl");   # Read and parse
\&
\& # Meta info
\& my $fn = $sccs\->file ();            # file.pl
\& my $cs = $sccs\->checksum ();        # 52534
\& my @us = $sccs\->users ();           # qw( merijn user )
\& my $fl = $sccs\->flags ();           # { q => "Test applic", v => undef }
\& my $cm = $sccs\->comment ();         # ""
\& my $cr = $sccs\->current ();         # 70
\& my @cr = $sccs\->current ();         # ( 70, "5.39", 5, 39 )
\&
\& # Delta related
\& my $vs = $sccs\->version ();         # "5.39"
\& my $vs = $sccs\->version (69);       # "5.38"
\& my $rv = $sccs\->revision ();        # 70
\& my $rv = $sccs\->revision ("5.37");  # 68
\& my $rm = $sccs\->revision_map ();    # [ [ 1, "4.1" ], ... [ 70, "5.39" ]]
\& my $dd = $sccs\->delta (17);         # none, revision or version as arg
\&
\& # Content related
\& my $body_70 = $sccs\->body ();       # file.pl @70 incl NL\*(Aqs
\& my @body_70 = $sccs\->body ();       # file.pl @70 list of chomped lines
\& my @body_69 = $sccs\->body (69);     # same for file.pl at revision 69
\& my @body_69 = $sccs\->body ("5.38"); # same
\&
\& $sccs\->set_translate ("SCCS");
\& print $sccs\->translate ($rev, $line);
\&
\& \-\- NYI \-\-
\& my $diff = $sccs\->diff (67);        # unified diff between rev 67 and 70
\& my $diff = $sccs\->diff (63, "5.37");# unified diff between rev 63 and 68
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
SCCS was the dominant version control system until the release of the
Revision Control System. Today, SCCS is generally considered obsolete.
However, its file format is still used internally by a few other revision
control programs, including BitKeeper and TeamWare. Sablime[1] also allows
the use of SCCS files. The SCCS file format uses a storage technique called
interleaved deltas (or the weave). This storage technique is now considered
by many revision control system developers as key to some advanced merging
techniques, such as the "Precise Codeville" ("pcdv") merge.
.PP
This interface aims at the possibility to read those files, without the
need of the sccs utility set, and open up to the possibility of scripts
that use it to convert to more modern VCSs like git, Mercurial, CVS, or
subversion.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS "Meta function"
.IX Subsection "Meta function"
.IP "new (<file>)" 4
.IX Item "new (<file>)"
The constructor only accepts a single argument: the SCCS file. this will
typically be something like \f(CW\*(C`SCCS/s.file.c\*(C'\fR.
.Sp
If anything in that file makes \f(CW\*(C`new ()\*(C'\fR believe that it is not a SCCS
file, it will return undef. In this stage, there is no way yet to tell
why \f(CW\*(C`new ()\*(C'\fR failed.
.IP file 4
.IX Item "file"
Returns the name of the parsed file. Useful if you have more than a
single \f(CW$sccs\fR object.
.IP checksum 4
.IX Item "checksum"
Returns the checksum that was stored in the file. This module does not
check if it is valid, nor does it have functionality to calculate a new
checksum.
.IP users 4
.IX Item "users"
Returns the list of users that was recorded in this file as authorized
to make deltas/changes.
.IP flags 4
.IX Item "flags"
Returns a hash of the flags set for this file (if set at all). VCS::SCCS
does not do anything with these flags. They are here for the end-user only.
.Sp
Note that not all flags are supported by all versions of \f(CW\*(C`admin\*(C'\fR, like
\&\f(CW\*(C`x\*(C'\fR is supported on HP-UX, but not in CSSC.
.RS 4
.IP "t <type of program>" 4
.IX Item "t <type of program>"
File has a user defined value for the \f(CW%Y\fR% keyword.
.IP "v [<program name>]" 4
.IX Item "v [<program name>]"
File was flagged to prompt for MR (using <program name> for validation).
.IP "i <keyword string>" 4
.IX Item "i <keyword string>"
File was flagged to require id keywords.
.IP b 4
.IX Item "b"
File was allowed to pass \-b to get to create branch deltas.
.IP "m <module name>" 4
.IX Item "m <module name>"
File has a user defined value for the \f(CW%M\fR% keyword.
.IP "f <floor>" 4
.IX Item "f <floor>"
File was given a floor: the lowest release, a number from 1 to 9998, which
may be get for editing.
.IP "c <ceiling>" 4
.IX Item "c <ceiling>"
File was given a ceiling: a number less than or equal to 9999, which can
be retrieved by a get command.
.IP "d <default sid>" 4
.IX Item "d <default sid>"
File was given a default delta number SID.
.IP n 4
.IX Item "n"
File created null deltas for skipped major versions.
.IP j 4
.IX Item "j"
File was flagged to allow concurrent edits on the same SID.
.IP "l <lock releases>" 4
.IX Item "l <lock releases>"
File was given a list of releases to which deltas can no longer be made.
.IP "q <user defined text>" 4
.IX Item "q <user defined text>"
File has a user defined value for the \f(CW%Q\fR% keyword.
.IP "s <line count>" 4
.IX Item "s <line count>"
Defines the number of lines scanned for keyword expansion. Past that
line, no keyword expansion takes place. Not implemented in all version.
.Sp
This flag is a SUN extension that does not exist in historic SCCS
implementations and is completely ignored by \f(CW\*(C`VCS::SCCS\*(C'\fR.
.IP "x (HP-UX, SCO)" 4
.IX Item "x (HP-UX, SCO)"
File was flagged to set execution bit on get. This is the implementation
that VCS::SCCS knows about.
.IP "x SCHILY|0 (other)" 4
.IX Item "x SCHILY|0 (other)"
Enable SCCS extensions that are not implemented in classical SCCS
variants. If the \f(CW\*(C`x\*(C'\fR flag is enabled, the keywords \f(CW%D\fR%, \f(CW%E\fR%, \f(CW%G\fR%
and \f(CW%H\fR% are expanded even though not explicitly enabled by the \f(CW\*(C`y\*(C'\fR
flag.
.Sp
This flag is a SCHILY extension that does not exist in historic SCCS
implementations.
.IP "y <val> ..." 4
.IX Item "y <val> ..."
The list of SCCS keywords to be expanded. If the \f(CW\*(C`y\*(C'\fR flag is missing,
all keywords are expanded. If the flag is present but the list is empty,
no keyword is expanded and no "No id keywords" message is generated. The
value \f(CW\*(C`*\*(C'\fR controls the expansion of the \f(CW%sccs\fR.include.filename% keyword.
.Sp
This flag is a SUN/SCHILY extension that does not exist in historic SCCS
implementations.
.Sp
This flag is currently ignored in \f(CW\*(C`VCS::SCCS\*(C'\fR.
.IP "z <reserved for use in interfaces>" 4
.IX Item "z <reserved for use in interfaces>"
Used in Sun's NSE system.
.RE
.RS 4
.RE
.IP comment 4
.IX Item "comment"
The comment that was added when the file was created.
.IP current 4
.IX Item "current"
In scalar context returns the current revision number. That is the
number of the file that would be restored by get with no arguments.
.Sp
In list context, it returns the current revision, version and parts
of the version, something like \f(CW\*(C`(70, "5.39", 5, 39, undef, undef)\*(C'\fR.
The last 4 numbers are the equivalent of the keywords \f(CW%R\fR%, \f(CW%L\fR%, \f(CW%B\fR%,
and \f(CW%S\fR% for that release.
.IP "set_translate (<type>)" 4
.IX Item "set_translate (<type>)"
By default VCS::SCCS will not translate the SCCS keywords (like \f(CW\*(C`%W%\*(C'\fR,
see \f(CW\*(C`translate ()\*(C'\fR for the full list). With \f(CW\*(C`set_translate ()\*(C'\fR, you
can select a translation type: \f(CW\*(C`SCCS\*(C'\fR is currently the only supported
type, \f(CW\*(C`CVS\*(C'\fR and \f(CW\*(C`RCS\*(C'\fR are planned. Passing a false argument will reset
translation to none.
.Sp
You can also pass a hashref that will do custom translation:
.Sp
.Vb 7
\&  my %trans = (
\&    "%W%" => "This is my what id",
\&    "%E%" => "Yesterday",
\&    "%U%" => "Noon",
\&    #...
\&    };
\&  $sccs\->set_translate (\e%tran);
.Ve
.Sp
any missing keywords will not be translated.
.SS "Delta functions"
.IX Subsection "Delta functions"
.IP delta 4
.IX Item "delta"
.PD 0
.IP "delta (<revision>)" 4
.IX Item "delta (<revision>)"
.IP "delta (<version>)" 4
.IX Item "delta (<version>)"
.PD
If called without argument, it returns the delta of the last revision
as a hashref.
.Sp
If called with a revision argument, it returns you the delta of that
revision. If there is no such revision, returns undef.
.Sp
If called with a version argument, it returns you the delta of that
version. If there is no such version, returns undef.
.Sp
The elements of the hash returned are:
.RS 4
.IP lines_ins 4
.IX Item "lines_ins"
The number of lines inserted in this delta
.IP lines_del 4
.IX Item "lines_del"
The number of lines deleted in this delta
.IP lines_unc 4
.IX Item "lines_unc"
The number of lines unchanged in this delta
.IP type 4
.IX Item "type"
The type of this delta. Usually this will be a \f(CW\*(C`D\*(C'\fR, but it could
also be a \f(CW\*(C`R\*(C'\fR, which has not (yet) been tested.
.IP version 4
.IX Item "version"
The version (SID) of this delta
.IP release 4
.IX Item "release"
The release number of this delta
.IP level 4
.IX Item "level"
The level number of this delta
.IP branch 4
.IX Item "branch"
The branch number of this delta. Can be undef
.IP sequence 4
.IX Item "sequence"
The sequence number of this delta. Can be undef
.IP date 4
.IX Item "date"
The date this delta was submitted in YY/MM/DD format
.IP time 4
.IX Item "time"
The time this delta was submitted in HH:MM:SS format
.IP stamp 4
.IX Item "stamp"
The \f(CW\*(C`date\*(C'\fR and \f(CW\*(C`time\*(C'\fR elements converted to a unix time stamp
.IP committer 4
.IX Item "committer"
The logname of the user that committed this delta
.IP mr 4
.IX Item "mr"
The MR numbers of this delta, separated by ", "
.IP comment 4
.IX Item "comment"
The comment as entered with this delta
.RE
.RS 4
.RE
.IP version 4
.IX Item "version"
.PD 0
.IP "version (<revision>)" 4
.IX Item "version (<revision>)"
.PD
If called without argument, it returns the last version, just as
the second return value of \f(CW\*(C`current ()\*(C'\fR in list context.
.Sp
If called with a revision argument, it returns you the version that
matches that revision. It returns undef if no matching version is
found.
.IP revision 4
.IX Item "revision"
.PD 0
.IP "revision (<version>)" 4
.IX Item "revision (<version>)"
.PD
If called without argument, it returns the last revision, just as
\&\f(CW\*(C`current ()\*(C'\fR returns in scalar context.
.Sp
If called with a version argument, it returns you the revision that
matches that version. It returns undef if no matching revision is
found.
.IP revision_map 4
.IX Item "revision_map"
Returns an anonymous list of \f(CW\*(C`revision\*(C'\fR \- \f(CW\*(C`version\*(C'\fR pairs (in
anonymous lists).
.SS "Content function"
.IX Subsection "Content function"
.IP body 4
.IX Item "body"
.PD 0
.IP "body (<revision>)" 4
.IX Item "body (<revision>)"
.IP "body (<version>)" 4
.IX Item "body (<version>)"
.PD
In scalar context returns the full body for the given revision.
If no revision is passed, the current (most recent) revision is
used. If a version is passed, the matching revision will be used.
If the is no matching version or revision, \f(CW\*(C`body ()\*(C'\fR returns
\&\f(CW\*(C`undef\*(C'\fR.
.Sp
In list context, \f(CW\*(C`body ()\*(C'\fR returns the list of chomped lines for
the given revision.
.Sp
\&\f(CW\*(C`body ()\*(C'\fR will use the translation set by \f(CW\*(C`set_translate ()\*(C'\fR.
.IP diff 4
.IX Item "diff"
NYI
.IP "translate (<revision>, <text>)" 4
.IX Item "translate (<revision>, <text>)"
Translate the SCCS keywords in the text passed using the plan set
with \f(CW\*(C`set_translate ()\*(C'\fR.
.Sp
The SCCS keywords are
.RS 4
.ie n .IP %M% 4
.el .IP \f(CW%M\fR% 4
.IX Item "%M%"
Module name: either the value of the m flag in the file (see \f(CW\*(C`flags\*(C'\fR),
or if absent, the name of the SCCS file with the leading s. removed.
.ie n .IP %I% 4
.el .IP \f(CW%I\fR% 4
.IX Item "%I%"
SCCS identification (SID) (%R%.%L%.%B%.%S%) of the retrieved text.
.ie n .IP %R% 4
.el .IP \f(CW%R\fR% 4
.IX Item "%R%"
Release.
.ie n .IP %L% 4
.el .IP \f(CW%L\fR% 4
.IX Item "%L%"
Level.
.ie n .IP %B% 4
.el .IP \f(CW%B\fR% 4
.IX Item "%B%"
Branch.
.ie n .IP %S% 4
.el .IP \f(CW%S\fR% 4
.IX Item "%S%"
Sequence.
.ie n .IP %D% 4
.el .IP \f(CW%D\fR% 4
.IX Item "%D%"
Current date (YY/MM/DD).
.ie n .IP %H% 4
.el .IP \f(CW%H\fR% 4
.IX Item "%H%"
Current date (MM/DD/YY).
.ie n .IP %T% 4
.el .IP \f(CW%T\fR% 4
.IX Item "%T%"
Current time (HH:MM:SS).
.ie n .IP %E% 4
.el .IP \f(CW%E\fR% 4
.IX Item "%E%"
Date newest applied delta was created (YY/MM/DD).
.ie n .IP %G% 4
.el .IP \f(CW%G\fR% 4
.IX Item "%G%"
Date newest applied delta was created (MM/DD/YY).
.ie n .IP %U% 4
.el .IP \f(CW%U\fR% 4
.IX Item "%U%"
Time newest applied delta was created (HH:MM:SS).
.ie n .IP %Y% 4
.el .IP \f(CW%Y\fR% 4
.IX Item "%Y%"
Module type: value of the t flag in the SCCS file (see \f(CW\*(C`flags\*(C'\fR).
.ie n .IP %F% 4
.el .IP \f(CW%F\fR% 4
.IX Item "%F%"
SCCS file name.
.ie n .IP %P% 4
.el .IP \f(CW%P\fR% 4
.IX Item "%P%"
Fully qualified SCCS file name.
.ie n .IP %Q% 4
.el .IP \f(CW%Q\fR% 4
.IX Item "%Q%"
The value of the q flag in the file (see \f(CW\*(C`flags\*(C'\fR).
.ie n .IP %C% 4
.el .IP \f(CW%C\fR% 4
.IX Item "%C%"
Current line number.  This keyword is intended for identifying messages
output by the program such as \-\-this should not have happened\-\- type
errors.  It is not intended to be used on every line to provide sequence
numbers.
.ie n .IP %Z% 4
.el .IP \f(CW%Z\fR% 4
.IX Item "%Z%"
The 4\-character string @(#) @(#) recognizable by what (see \fBwhat\fR\|(1)).
.ie n .IP %W% 4
.el .IP \f(CW%W\fR% 4
.IX Item "%W%"
A shorthand notation for constructing \fBwhat\fR\|(1) strings for HP-UX system
program files.  \f(CW%W\fR%=%Z%%M%horizontal\-tab%I%
.ie n .IP %A% 4
.el .IP \f(CW%A\fR% 4
.IX Item "%A%"
Another shorthand notation for constructing \fBwhat\fR\|(1) strings for
non-HP-UX system program files.  \f(CW%A\fR% = \f(CW%Z\fR%%Y% \f(CW%M\fR% \f(CW%I\fR%%Z%
.RE
.RS 4
.Sp
For now, \f(CW%D\fR%, \f(CW%H\fR%, \f(CW%T\fR%, \f(CW%G\fR%, \f(CW%F\fR%, \f(CW%P\fR%, and \f(CW%C\fR% are not translated.
I see no use for \f(CW%D\fR%, \f(CW%H\fR%, or \f(CW%T\fR%. People that use \f(CW%G\fR% have enough
problems already, so they should be able to cope, \f(CW%F\fR% and \f(CW%P\fR% lose
their meaning after conversion and \f(CW%C\fR% might be done later.
.Sp
If you convert from SCCS to git, it might be advisable to not do
any translation at all, and leave the keywords in, just the way
they are, and create a checkout hook.
.RE
.SH SPECIFICATION
.IX Header "SPECIFICATION"
SCCS file format is reasonable well documented. I have included a
manual page for sccsfile for HP-UX in doc/
.SH EXAMPLES
.IX Header "EXAMPLES"
See the files in examples/ for my attempts to start converters to
other VCSs
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
As this module is created as a base for conversion to more useful
and robust VCSs, it is a read-only interface to the SCCS files.
.PP
Translation is incomplete and might be questionable, but at least
there is a workaround.
.SH TODO
.IX Header "TODO"
.Vb 11
\& * improve documentation
\& * implement diff ()
\& * more tests
\& * autodetect the available VCS candidates for sccs2***
\& * sccs2git documentation and installation
\& * sccs2rcs
\& * sccs2cvs
\& * sccs2hg
\& * sccs2svn
\& * errors and warnings
\& * provide hooks to VCS::
.Ve
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
First errors, than diagnostics ...
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP SCCS 2
.IX Item "SCCS"
source code at http://sccs.sourceforge.net/
.Sp
manual pages at http://sccs.sourceforge.net/man/index.html
.Sp
http://en.wikipedia.org/wiki/Source_Code_Control_System
.IP CSSC 2
.IX Item "CSSC"
https://sourceforge.net/projects/cssc
A GNU project that aims to be a drop-in replacement for SCCS. It is
written in c++ and therefor disqualifies to be used at any older OS
that does support SCCS but has no C++ compiler. And even if you have
one, there is a good chance it won't build or does not bass the basic
tests. I did not get it to work.
.IP VCS 2
.IX Item "VCS"
http://search.cpan.org/dist/VCS
.IP GIT 2
.IX Item "GIT"
http://www.kernel.org/pub/software/scm/git/docs/
.SH AUTHOR
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2007\-2023 H.Merijn Brand
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
